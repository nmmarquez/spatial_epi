model = "iid", param = c(1, 0.014)), data = Scotland,
family = "poisson", E = E)
summary(scotland.fit1X)
install.packages()
install.packages("maxLik")
rbeta(1,1,1)
rbeta(1000,1,1)
hist(rbeta(1000,1,1))
hist(rbeta(1000,1,.3))
hist(rbeta(1000,3,.3))
hist(rbeta(1000,10,2))
hist(rbeta(1000,10,3))
hist(rbeta(1000,10,10))
plot(density(rbeta(1000,10,10)))
dbeta(.5,10,10)
?dbeta
dbeta(.5,10,10,log=TRUE)
dbeta(.6,10,10,log=TRUE)
dbeta(.4,10,10,log=TRUE)
dbeta(c(.4, .6, .5),10,10,log=TRUE)
rm(list=ls())
source("~/Documents/Classes/spatial_epi/homework/hw1/ohio.dat")
head(ohio)
library(SpatialEpi)
library(maps)
library(sp)
library(RColorBrewer)
?eBayes
library(plyr)
strata <- ddply(ohio, ~age+sex+race, summarise,
deaths=sum(deaths), popn=sum(popn))
source('~/Documents/Classes/spatial_epi/homework/hw2/hw2.R', echo=TRUE)
head(county)
?EBpostdens
?rgamma
is.null(3)
seq(0,1,.25)
library(INLA)
hist(rgamma(1000,5,5))
hist(rlnorm(1000,0,1))
mean(rlnorm(1000,0,1))
library(INLA)
?inla
?f
names(inla.models()$latent)
dgamma(2,10,5)
dgamma(200,10,5)
dgamma(20,10,5)
dgamma(.002,10,5)
dgamma(.2,10,5)
dgamma(.2,10,5,log=True)
dgamma(.2,10,5,log=T)
dgamma(2,10,5,log=T)
source('~/Dropbox/PAWS-Neal/neal_analysis/data_reshape.R', echo=TRUE)
source('~/Dropbox/PAWS-Neal/neal_analysis/examine_network.R', echo=TRUE)
library("foreign")
library("igraph")
library("plyr")
rm(list=ls())
getwd()
source("~/Dropbox/PAWS-Neal/neal_analysis/network_app/utilities.R")
data_sets <- load_data()
df <- data_sets[[1]]
df_status <- data_sets[[2]]
source("~/Dropbox/PAWS-Neal/neal_analysis/network_app/utilities.R")
sub_mat <- create_sub_matrix("prosocial", teacher=NULL, df, df_status)
dim(sub_mat)
sub_mat <- create_sub_matrix("prosocial", teacher=NULL, df, df_status)
g1 <- graph.adjacency(sub_mat)
V(g1)$color <- as.factor(df_status$paws_student)
#V(g1)$color=gsub("FALSE","red",V(g1)$color) #Females will be red
#V(g1)$color=gsub("TRUE","blue",V(g1)$color) #Males will be blue
plot(g1, layout=layout.fruchterman.reingold, vertex.label=NA,
vertex.size=8, edge.arrow.size=.25)
source('~/Dropbox/PAWS-Neal/neal_analysis/examine_network.R', echo=TRUE)
shiny::runApp('Documents/tmp/pac_app')
install.packages("devtools")
library("shinyapps")
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='nmarquez',
token='9110009049F07B35E06BCA3977FCBB29',
secret='btaCQnln6280gV0v+kK9/gYya1u66HNRAG2CaUnz')
library("shinyapps")
deployApp("~/Documents/tmp/pac_app/")
source('~/Dropbox/PAWS-Neal/neal_analysis/data_reshape.R', echo=TRUE)
head(identity)
summary(identity$Teacher)
table(identity$Teacher)
table(interactions$Class)
table(sapply(interactions$Class, function(x) strsplit(x, " ")[[1]][2]))
table(identity$Teacher)
pivot_df$Teacher <- gsub("Pat", "Patricia", pivot_df$Teacher)
table(pivot_df$Teacher)
source('~/Dropbox/PAWS-Neal/neal_analysis/data_reshape.R', echo=TRUE)
shiny::runApp('Dropbox/PAWS-Neal/neal_analysis/network_app')
deployApp("~/Documents/tmp/pac_app/")
names(merged_interactions)
subset(merged_interactions, Teacher == "Carrie")
names(merged_interactions)
subset(merged_interactions, Teacher == "Carrie")[,c("PAWSID_S", "PAWSID_R", "Code_B")]
shiny::runApp('Dropbox/PAWS-Neal/neal_analysis/network_app')
shiny::runApp('Dropbox/PAWS-Neal/neal_analysis/network_app')
shiny::runApp('Dropbox/PAWS-Neal/neal_analysis/network_app')
source('~/Dropbox/PAWS-Neal/neal_analysis/examine_network.R', echo=TRUE)
V(g1)$name
plot(g1, layout=layout.fruchterman.reingold,
)
shiny::runApp('Dropbox/PAWS-Neal/neal_analysis/network_app')
source('~/Dropbox/PAWS-Neal/neal_analysis/data_reshape.R', echo=TRUE)
subset(merged_interactions, Teacher == "Carrie")[,c("PAWSID_S", "PAWSID_R", "Code_B")]
shiny::runApp('Dropbox/PAWS-Neal/neal_analysis/network_app')
subset(subset(merged_interactions, Teacher == "Carrie")[,c("PAWSID_S", "PAWSID_R", "Code_B")], PAWSID_S == 90 | PAWSID_R == 90)
subset(subset(merged_interactions, Teacher == "Carrie")[,c("PAWSID_S", "PAWSID_R", "Code_B")], (PAWSID_S == 90 | PAWSID_R == 90) & (PAWSID_S == 221 | PAWSID_R == 221))
source('~/Documents/fbd_viz/rShiny_apps/env_pop/utilities.R', echo=TRUE)
install.packages("RMySQL")
install.packages("RMySQL")
source('~/Documents/fbd_viz/rShiny_apps/env_pop/utilities.R', echo=TRUE)
mortality_output_versions()
library(shiny)
library(shinydashboard)
library(RMySQL)
library(xlsx)
source('~/Documents/fbd_viz/rShiny_apps/env_pop/utilities.R', echo=TRUE)
df <- mortality_results(101,1,28)
mortality_plot(df, "mean_pop")
mortality_plot <- function(df, variable){
ages <- unique(df$age_group_id)
lapply(ages, function(a) single_plot(a, variable, df))
}
test <- mortality_plot(df, "mean_pop")
multiplot(plotlist = test, cols=2)
mortality_plot <- function(df, variable){
ages <- unique(df$age_group_id)
multiplot(plot_list=lapply(ages, function(a)
single_plot(a, variable, df)), cols=2)
}
mortality_plot(df, "mean_pop")
mortality_plot <- function(df, variable){
ages <- unique(df$age_group_id)
multiplot(plot_list=lapply(ages, function(a)
single_plot(a, variable, df)), cols=2)
}
mortality_plot <- function(df, variable){
ages <- unique(df$age_group_id)
multiplot(plotlist=lapply(ages, function(a)
single_plot(a, variable, df)), cols=2)
}
mortality_plot(df, "mean_pop")
shiny::runApp('Documents/fbd_viz/rShiny_apps/env_pop')
shiny::runApp('Documents/fbd_viz/rShiny_apps/env_pop')
shiny::runApp('Documents/fbd_viz/rShiny_apps/env_pop')
shiny::runApp('Documents/fbd_viz/rShiny_apps/env_pop')
df
head(df)
formula("y ~ x")
library(lme4)
?lmer
?dnorm
dnorm(0,log=T)
dnorm(0,log=F)
dnorm(1000,log=F)
dnorm(100,log=F)
dnorm(10,log=F)
dgamma(1000000,0.1, 1,T)
dgamma(1000000,0.1, 1,log=T)
dgamma(1000000,0.1, 10,log=T)
dgamma(.1/10.,0.1, 10,log=T)
dgamma(10.,0.1, 10,log=T)
dnorm(0,log=T)
dnorm(100,log=T)
library("TMB", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
dgamma(10.,0.1, 10,log=T)
dgamma(20.,0.1, 10,log=T)
dgamma(200.,0.1, 10,log=T)
dgamma(200.,0.1, 10,log=T)
dnorm(100,log=T)
dnorm(0,log=T)
dgamma(10.,0.1, 10,log=T)
dgamma(.1.,0.1, 10,log=T)
dgamma(.1,0.1, 10,log=T)
dnorm(0.1,log=T)
dnorm(0.1,log=F)
dnorm(0.1,log=T)
datur <- 1:10
nll <- 0
rm(list=ls())
nll <- 0
datur <- 1:10
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
install.packages("geoR")
?data
?ca20
library("geoR", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
set.seed(123)
rm(list=ls())
library(SpatialEpi)
library(spdep)
library(INLA)
library(RColorBrewer)
library(maptools)
library(maps)
library(ggplot2)
library(sp)
library(lattice)
library(parallel)
library(MASS)
M <- 1000 # number of simulations
phi <- seq(1/M,1,length.out=M)
tau <- .5
true_betas <- c(1, -1)
## Get Pennsylvania map file
setwd("~/Documents/Classes/spatial_epi/project/")
load("../homework/hw3/USA_adm2.RData") # From http://gadm.org/
cont_usa_locs <- c("Texas", "Louisiana")
cont_usa <- gadm[(gadm@data$NAME_1 %in% cont_usa_locs),]
cont_usa <- list(name="cont_usa", "SpatialPolygons" = cont_usa)
cont_usa$adjmat <- poly2adjmat(cont_usa$SpatialPolygons)
simulate_sre <- function(Q, M){
}}}
gtouches
library(rgeos)
library(rgdal)
load("./results.Rdata")
no_covs_no_pc
no_covs_yes_pc
yes_covs_yes_pc
with(results_df$no_covs_no_pc, plot(phi, phi_rse))
results_df <- lapply(results, as.data.frame)
names(results_df) <- c("no_covs_no_pc", "no_covs_yes_pc",
"yes_covs_no_pc", "yes_covs_yes_pc")
results <- list(no_covs_no_pc, no_covs_yes_pc, yes_covs_no_pc, yes_covs_yes_pc)
results <- list(no_covs_no_pc, no_covs_yes_pc, yes_covs_no_pc, yes_covs_yes_pc)
results_df <- lapply(results, as.data.frame)
names(results_df) <- c("no_covs_no_pc", "no_covs_yes_pc",
"yes_covs_no_pc", "yes_covs_yes_pc")
for(i in 1:4){
names(results_df[[i]]) <- c("beta0_rse", "beta1_rse", "beta2_rse",
"tau_rse", "phi_rse", "beta0_sd", "beta1_sd",
"tau_sd", "phi_sd")
results_df[[i]]$phi <- phi
}
with(results_df$no_covs_no_pc, plot(phi, phi_rse))
with(results_df$no_covs_yes_pc, plot(phi, phi_rse))
with(results_df$no_covs_no_pc, hist(log(phi_rse)))
with(results_df$no_covs_yes_pc, hist(log(phi_rse)))
with(results_df$no_covs_no_pc, mean(log(phi_rse)))
?mean
with(results_df$no_covs_no_pc, mean(log(phi_rse), na.rm=T))
with(results_df$no_covs_no_pc, mean(phi_rse, na.rm=T))
with(results_df$no_covs_yes_pc, mean(phi_rse, na.rm=T))
?abline
?line
?lines
with(results_df$no_covs_no_pc, hist(log(phi_rse)))
with(results_df$no_covs_no_pc, lines(c(mean(log(phi_rse), na.rm=T), mean(log(phi_rse), na.rm=T)), c(0,100)))
with(results_df$no_covs_no_pc,
lines(c(mean(log(phi_rse), na.rm=T), mean(log(phi_rse), na.rm=T)), c(0,1000), col="red"))
with(results_df$no_covs_no_pc,
lines(c(mean(log(phi_rse), na.rm=T), mean(log(phi_rse), na.rm=T)), c(0,1000), col="red", lwd=2))
with(results_df$no_covs_yes_pc,
lines(c(mean(log(phi_rse), na.rm=T), mean(log(phi_rse), na.rm=T)), c(0,1000), col="red", lwd=2))
with(results_df$no_covs_no_pc, hist(log(phi_rse)))
with(results_df$no_covs_no_pc,
lines(c(mean(log(phi_rse), na.rm=T), mean(log(phi_rse), na.rm=T)), c(0,1000), col="red", lwd=2))
with(results_df$no_covs_yes_pc, hist(log(phi_rse)))
with(results_df$no_covs_yes_pc,
lines(c(mean(log(phi_rse), na.rm=T), mean(log(phi_rse), na.rm=T)), c(0,1000), col="red", lwd=2))
with(results_df$no_covs_no_pc, plot(phi, phi_rse))
with(results_df$no_covs_yes_pc, plot(phi, phi_rse))
with(results_df$yes_covs_no_pc, plot(phi, beta0_rse))
with(results_df$yes_covs_yes_pc, plot(phi, beta1_rse))
with(results_df$yes_covs_yes_pc, plot(phi, beta2_rse))
with(results_df$yes_covs_yes_pc, plot(phi, beta0_rse))
with(results_df$yes_covs_yes_pc, plot(phi, beta1_rse))
with(results_df$yes_covs_yes_pc, plot(phi, beta2_rse))
plot(results_df$no_covs_no_pc$phi_rse, results_df$no_covs_yes_pc$phi_rse)
plot(results_df$no_covs_no_pc$tau_rse, results_df$no_covs_yes_pc$tau_rse)
plot(results_df$yes_covs_no_pc$beta0_rse, results_df$yes_covs_yes_pc$beta0_rse)
plot(results_df$yes_covs_no_pc$beta1_rse, results_df$yes_covs_yes_pc$beta1_rse)
plot(results_df$yes_covs_no_pc$beta2_rse, results_df$yes_covs_yes_pc$beta2_rse)
plot(results_df$no_covs_no_pc$phi_rse, results_df$no_covs_yes_pc$phi_rse)
plot(results_df$no_covs_no_pc$tau_rse, results_df$no_covs_yes_pc$tau_rse)
lm(results_df$yes_covs_no_pc$beta0_rse ~ results_df$yes_covs_yes_pc$beta0_rse)
summary(lm(results_df$yes_covs_no_pc$beta0_rse ~ results_df$yes_covs_yes_pc$beta0_rse))
mean(results_df$yes_covs_no_pc$beta0_rse, na.rm=T) - mean(results_df$yes_covs_yes_pc$beta0_rse, na.rm=T)
mean(results_df$yes_covs_no_pc$beta1_rse, na.rm=T) - mean(results_df$yes_covs_yes_pc$beta1_rse, na.rm=T)
mean(results_df$yes_covs_no_pc$beta2_rse, na.rm=T) - mean(results_df$yes_covs_yes_pc$beta2_rse, na.rm=T)
which(results_df$no_covs_yes_pc$phi_rse > .1)
which(results_df$no_covs_yes_pc$phi_rse > .6)
run_bym2 <- function(i, covs, pc, model=FALSE){
base <- 'f(ID, model = "bym2", scale.model=T, constr=T, graph=cont_usa$adjmat '
phi_str <- 'phi=list(prior ="pc", param=c(0.5, 2/3), initial=-3), \n\t\t'
prec_str <- 'prec=list(prior="pc.prec", initial=5, param=c(0.2/0.31, 0.01))'
hyper <- paste0(',\n hyper=list(', phi_str, prec_str, ")")
if(pc){
re <- paste0(base, hyper, ")")
}
else{
re <- paste0(base, ")")
}
if(covs){
mean_ <- paste0("both_covs", i, " ~ x1", i," + x2", i," + ")
}
else{
mean_ <- paste0("both", i, "~ 1 + ")
}
form <- formula(paste0(mean_, re))
result <- inla(form , data=cont_usa$SpatialPolygons@data,
family="poisson", control.predictor=list(compute=T))
if(model){
return(result)
}
betas <- result$summary.fixed[,"0.5quant"]
beta_sd <- result$summary.fixed[,"sd"]
if (length(betas) < 3){
betas <- c(betas, NA, NA)
beta_sd <- c(beta_sd, NA, NA)
}
betas_ <- (betas - c(0, true_betas))
tau_ <- (result$summary.hyperpar["Precision for ID", "0.5quant"] - tau)**2
tau_sd <- result$summary.hyperpar["Precision for ID", "sd"]
phi_ <- (result$summary.hyperpar["Phi for ID","0.5quant"] - phi[i])**2
phi_sd <- (result$summary.hyperpar["Phi for ID","0.5quant"] - phi[i])**2
c(betas_, tau_, phi_, beta_sd, tau_sd, phi_sd)
}
M <- 1000 # number of simulations
phi <- seq(1/M,1,length.out=M)
tau <- .5
true_betas <- c(1, -1)
## Get Pennsylvania map file
setwd("~/Documents/Classes/spatial_epi/project/")
load("../homework/hw3/USA_adm2.RData") # From http://gadm.org/
cont_usa_locs <- c("Texas", "Louisiana")
cont_usa <- gadm[(gadm@data$NAME_1 %in% cont_usa_locs),]
cont_usa <- list(name="cont_usa", "SpatialPolygons" = cont_usa)
cont_usa$adjmat <- poly2adjmat(cont_usa$SpatialPolygons)
simulate_sre <- function(Q, M){
n <- nrow(Q)
Qs <- inla.scale.model(Q, constr=list(A=matrix(1, nrow=1, ncol=n), e=0))
Q_star <- ginv(as.matrix(Qs))
t(mvrnorm(n=M, 0 * 1:n, Q_star))
}
library(surveillance)
cont_usa <- list(name="cont_usa", "SpatialPolygons" = cont_usa)
cont_usa$adjmat <- poly2adjmat(cont_usa$SpatialPolygons)
M <- 1000 # number of simulations
phi <- seq(1/M,1,length.out=M)
tau <- .5
true_betas <- c(1, -1)
## Get Pennsylvania map file
setwd("~/Documents/Classes/spatial_epi/project/")
load("../homework/hw3/USA_adm2.RData") # From http://gadm.org/
cont_usa_locs <- c("Texas", "Louisiana")
cont_usa <- gadm[(gadm@data$NAME_1 %in% cont_usa_locs),]
cont_usa <- list(name="cont_usa", "SpatialPolygons" = cont_usa)
cont_usa$adjmat <- poly2adjmat(cont_usa$SpatialPolygons)
simulate_sre <- function(Q, M){
n <- nrow(Q)
Qs <- inla.scale.model(Q, constr=list(A=matrix(1, nrow=1, ncol=n), e=0))
Q_star <- ginv(as.matrix(Qs))
t(mvrnorm(n=M, 0 * 1:n, Q_star))
}
delta_simulatar <- function(unit){
setwd("~/Documents/Classes/spatial_epi/project/")
load("../homework/hw3/USA_adm2.RData") # From http://gadm.org/
cont_usa_locs <- c("Texas", "Louisiana")
cont_usa <- gadm[(gadm@data$NAME_1 %in% cont_usa_locs),]
cont_usa <- list(name="cont_usa", "SpatialPolygons" = cont_usa)
}
setwd("~/Documents/Classes/spatial_epi/project/")
load("../homework/hw3/USA_adm2.RData") # From http://gadm.org/
cont_usa_locs <- c("Texas", "Louisiana")
cont_usa <- gadm[(gadm@data$NAME_1 %in% cont_usa_locs),]
cont_usa <- list(name="cont_usa", "SpatialPolygons" = cont_usa)
cont_usa$adjmat <- poly2adjmat(cont_usa$SpatialPolygons)
simulate_sre <- function(Q, M){
n <- nrow(Q)
Qs <- inla.scale.model(Q, constr=list(A=matrix(1, nrow=1, ncol=n), e=0))
Q_star <- ginv(as.matrix(Qs))
t(mvrnorm(n=M, 0 * 1:n, Q_star))
}
delta_simulatar <- function(unit){
# Given a spatial polygons data set applies
# a delta to each unit
sp <- unit$SpatialPolygons
N <- length(sp) # number of counties in a state unit
sp$ID <- 1:N
n_delta_i <- rowSums(unit$adjmat)
Q <- unit$adjmat * -1
diag(Q) <- n_delta_i
print("qflipped")
v <- sapply(1:M, function(x) rnorm(length(sp), 0, 1))
print("v created")
u <- simulate_sre(Q, M=M)
print("u created")
x1 <- sapply(1:M, function(x)rnorm(length(sp)))
x2 <- sapply(1:M, function(x)rnorm(length(sp)))
print("x created")
beta1 <- true_betas[1]
beta2 <- true_betas[2]
prec <- 1/sqrt(tau)
mean_ <- beta1 * x1 + beta2 * x2
random <- sapply(1:ncol(v), function(x)
rpois(length(v[,x]), exp(prec * v[,x])))
spatial <- sapply(1:ncol(u), function(x)
rpois(length(u[,x]), exp(prec * u[,x])))
both <- sapply(1:ncol(u), function(x)
rpois(length(u[,x]),
exp(prec * (sqrt(1 - phi[x]) * v[,x] + sqrt(phi[x]) * u[,x]))))
print("constant created")
random_covs <- sapply(1:ncol(v), function(x)
rpois(length(v[,x]), exp(mean_[,x] + prec * v[,x])))
spatial_covs <- sapply(1:ncol(u), function(x)
rpois(length(u[,x]), exp(mean_[,x] + prec * u[,x])))
both_covs <- sapply(1:ncol(u), function(x)
rpois(length(u[,x]),
exp(mean_[,x] + prec * (sqrt(1 - phi[x]) * v[,x] + sqrt(phi[x]) * u[,x]))))
print("cov adjusted created")
sp@data[,paste0("v", 1:M)] <- v
sp@data[,paste0("u", 1:M)] <- u
sp@data[,paste0("x1", 1:M)] <- x1
sp@data[,paste0("x2", 1:M)] <- x2
sp@data[,paste0("random", 1:M)] <- random
sp@data[,paste0("spatial", 1:M)] <- spatial
sp@data[,paste0("both", 1:M)] <- both
sp@data[,paste0("random_covs", 1:M)] <- random_covs
sp@data[,paste0("spatial_covs", 1:M)] <- spatial_covs
sp@data[,paste0("both_covs", 1:M)] <- both_covs
sp
}
run_bym2 <- function(i, covs, pc, model=FALSE){
base <- 'f(ID, model = "bym2", scale.model=T, constr=T, graph=cont_usa$adjmat '
phi_str <- 'phi=list(prior ="pc", param=c(0.5, 2/3), initial=-3), \n\t\t'
prec_str <- 'prec=list(prior="pc.prec", initial=5, param=c(0.2/0.31, 0.01))'
hyper <- paste0(',\n hyper=list(', phi_str, prec_str, ")")
if(pc){
re <- paste0(base, hyper, ")")
}
else{
re <- paste0(base, ")")
}
if(covs){
mean_ <- paste0("both_covs", i, " ~ x1", i," + x2", i," + ")
}
else{
mean_ <- paste0("both", i, "~ 1 + ")
}
form <- formula(paste0(mean_, re))
result <- inla(form , data=cont_usa$SpatialPolygons@data,
family="poisson", control.predictor=list(compute=T))
if(model){
return(result)
}
betas <- result$summary.fixed[,"0.5quant"]
beta_sd <- result$summary.fixed[,"sd"]
if (length(betas) < 3){
betas <- c(betas, NA, NA)
beta_sd <- c(beta_sd, NA, NA)
}
betas_ <- (betas - c(0, true_betas))
tau_ <- (result$summary.hyperpar["Precision for ID", "0.5quant"] - tau)**2
tau_sd <- result$summary.hyperpar["Precision for ID", "sd"]
phi_ <- (result$summary.hyperpar["Phi for ID","0.5quant"] - phi[i])**2
phi_sd <- (result$summary.hyperpar["Phi for ID","0.5quant"] - phi[i])**2
c(betas_, tau_, phi_, beta_sd, tau_sd, phi_sd)
}
run_bym2_safe <- function(i, covs, pc){
out <- tryCatch({run_bym2(i, covs, pc)},
error=function(cond){c(NA, NA, NA, NA, NA)})
out
}
cont_usa$SpatialPolygons <- delta_simulatar(cont_usa)
summary(run_bym2(bad_result[0], F, T, T))
bad_result <- which(results_df$no_covs_yes_pc$phi_rse > .6)
summary(run_bym2(bad_result[0], F, T, T))
run_bym2(bad_result[0], F, T, T)
bad_result[0]
load(f)
f <- "./results.Rdata"
load(f)
bad_result <- which(results_df$no_covs_yes_pc$phi_rse > .6)
bad_result[0]
results_df <- lapply(results, as.data.frame)
names(results_df) <- c("no_covs_no_pc", "no_covs_yes_pc",
"yes_covs_no_pc", "yes_covs_yes_pc")
for(i in 1:4){
names(results_df[[i]]) <- c("beta0_rse", "beta1_rse", "beta2_rse",
"tau_rse", "phi_rse", "beta0_sd", "beta1_sd",
"tau_sd", "phi_sd")
results_df[[i]]$phi <- phi
}
bad_result <- which(results_df$no_covs_yes_pc$phi_rse > .6)
run_bym2(bad_result[0], F, T, T)
run_bym2(bad_result[1], F, T, T)
summary(run_bym2(bad_result[1], F, T, T))
1/.5
4
1/sqrt(4)
1/sqrt(.5)
source('~/Documents/Classes/spatial_epi/project/project_outlay.r', echo=TRUE)
source('~/Documents/Classes/spatial_epi/project/project_outlay.r', echo=TRUE)
##------ Fri Mar 11 12:58:44 2016 ------##
##------ Fri Mar 11 12:58:57 2016 ------##
##------ Fri Mar 11 12:59:10 2016 ------##
##------ Fri Mar 11 12:59:26 2016 ------##
##------ Fri Mar 11 12:59:49 2016 ------##
