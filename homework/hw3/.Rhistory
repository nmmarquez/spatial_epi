#     Relationship Aggression, Tease, Threat, and Verbal Aggression.
#     [Submissive] Apologize, Compliance, Seeks Help, Retreat,
#     and Submission.
#     [Leadership] Directs Behavior, Reprimands, And Leadership Other.
#     [Followship] Follow/Copy, Solicit Instruction,
#     Followship Other, and Watching.
#     [Resource Struggle] Object Struggle, Position Struggle,
#     Student Attention, Teacher Attention, and Resource Struggle.
#     [Prosocial] Offers a Gift, Offers Help, Protects,
#     Speaks Nicely, and Prosocial Other.
agg <- sapply(c("Chase", "Physical Agg.", "Approach", "Relationship ag.",
"Relationship agg", "Relationship Agg", "Tease", "Threat",
"Verbal Agg."), function(x) "aggression")
sub <- sapply(c("Apologize", "Compliance", "Seeks Help", "Retreat",
"Submission"), function(x) "submissive")
lead <- sapply(c("Directs Behavior", "Reprimands", "Leadership Other",
"Solicit Instruc."), function(x) "leadership")
follow <- sapply(c("Follow/Copy", "Followship Other"),
function(x) "followship")
resource <- sapply(c("Object Struggle", "Position Strugg.",
"Student Attent.", "Teacher Attent.",
"Teacher Interven", "Resource Strugg."),
function(x) "resource_struggle")
prosocial <- sapply(c("Offers a Gift", "Offers Help", "Protects",
"Speaks Nicely", "Prosocial Other"),
function(x) "prosocial")
all <- c(agg, sub, lead, follow, resource, prosocial)
sapply(behaviors, function(x) if (x %in% names(all)) all[x] else "other")
}
df <- read.csv("~/Dropbox/PAWS-Neal/neal_analysis/pivot_interaction.csv")
df <- subset(df, PAWSID >= 10000)
df <- subset(df, partnerID >= 10000)
df$PAWSID <- as.character(df$PAWSID)
schools <- unique(df[,c("subject", "PAWSID", "School")])
# keep tabs of the students status in the program
df_status <- unique(df[,c("PAWSID", "paws_student", "School", "subject")])
# we only need to look at one side of the interaction
df <- subset(df, role == "sender")
df$classified_behavior <- classify_behavior(df$Code_B)
# examine a particular network structure of the data set
sub_df <- subset(df, Code_B == "Subordinate")
# make a matrix add ing rows and columns where neccesary
sub_mat <- table(sub_df$PAWSID, sub_df$partnerID)
missing_rows <- setdiff(df_status$PAWSID, rownames(sub_mat))
sub_mat <- rbind(sub_mat,
matrix(0, nrow=length(missing_rows), ncol=ncol(sub_mat),
dimnames=list(missing_rows, colnames(sub_mat))))
missing_cols <- setdiff(df_status$PAWSID, colnames(sub_mat))
sub_mat <- cbind(sub_mat,
matrix(0, nrow=nrow(sub_mat), ncol=length(missing_cols),
dimnames=list(rownames(sub_mat), missing_cols)))
sub_mat <- sub_mat[df_status$PAWSID, df_status$PAWSID]
diag(sub_mat) <- NA
g1 <- graph.adjacency(sub_mat)
V(g1)$color <- as.factor(df_status$School)
plot(g1, layout=layout.fruchterman.reingold, vertex.label=NA,
vertex.size=8, edge.arrow.size=.25)
colours <- unique(as.factor(df_status$School))
labels <- unique(df_status$School)
legend("topleft",legend=labels, fill=colours,
title="Schools", seg.len = 1)
source('~/Dropbox/PAWS-Neal/neal_analysis/examine_network.R', echo=TRUE)
source('~/Dropbox/PAWS-Neal/neal_analysis/examine_network.R', echo=TRUE)
df <- read.csv("~/Dropbox/PAWS-Neal/neal_analysis/pivot_interaction.csv")
summary(df)
source('~/Dropbox/PAWS-Neal/neal_analysis/data_reshape.R', echo=TRUE)
head(pivot_df)
head(merged_interactions)
nrow(merged_interactions)
nrow(subset(merged_interactions, PAWSID_R | PAWSID_S))
nrow(subset(merged_interactions, PAWSID_R & PAWSID_S))
nrow(subset(merged_interactions, PAWSID_R==T & PAWSID_S==T))
nrow(subset(merged_interactions, (PAWSID_R==T) & (PAWSID_S==T)))
nrow(subset(merged_interactions, (PAWSID_R==T) | (PAWSID_S==T)))
nrow(subset(merged_interactions, (paws_student_R==T) | (paws_student_S==T)))
nrow(merged_interactions)
nrow(subset(merged_interactions, (paws_student_R==T) | (paws_student_S==T)))
nrow(subset(merged_interactions, (paws_student_R==T) & (paws_student_S==T)))
id_vars <- c("PAWS.ID", "Cohort", "School", "Teacher", "Child.s.Name")
identity <- read.csv("~/Documents/PAWS/all_cohorts_info.csv",
stringsAsFactors=FALSE)[,id_vars]
head(identity)
identity <- read.csv("~/Documents/PAWS/all_cohorts_info.csv",
stringsAsFactors=FALSE)#[,id_vars]
head(identity)
head(df_new_id)
################################################################################
# Data reshape file
#
# Load in the data sets related to peer interactions and change the subjects
# identification to use PAWS ids rather than name. For all those students
# without PAWS ids assign a unique identifie so that they can be tracked.
################################################################################
rm(list = ls())
library(plyr)
library(foreign)
interactions <- read.csv("~/Dropbox/PAWS-Neal/paws_extracted_data.csv",
na.strings=c("-"," ", ""), stringsAsFactors=FALSE)
# Assign an behavior id to each row
interactions$behavior_id <- as.numeric(rownames(interactions))
# Remove interactions where individual is both sender and reciever
print(nrow(interactions[interactions$Code_R == interactions$Code_S,]))
interactions <- interactions[interactions$Code_R != interactions$Code_S,]
# reshape the data set such that each row is a unique behavior subject
# limit to the columns that we care about
invariant_vars <- c("behavior_id", "Class", "File", "Time", "DE_END", "Type",
"Code_B", "Code_R", "Code_S")
interactions <- interactions[, invariant_vars]
# split up the data by receiver and sender then add them on each other
receiver_df <- interactions[,invariant_vars]
receiver_df$role <- "receiver"
rename_reciever <- c(Code_R="subject", Code_S="partner")
receiver_df <- rename(receiver_df, rename_reciever)
sender_df <- interactions[,invariant_vars]
sender_df$role <- "sender"
rename_sender <- c(Code_S="subject", Code_R="partner")
sender_df <- rename(sender_df, rename_sender)
pivot_df <- rbind(sender_df, receiver_df)
pivot_df$Teacher <- sapply(pivot_df$Class, function(x) strsplit(x, " ")[[1]][2])
pivot_df$School <- sapply(pivot_df$Class, function(x) strsplit(x, " ")[[1]][1])
# Load in the identifier data
id_vars <- c("PAWS.ID", "Cohort", "School", "Teacher", "Child.s.Name")
identity <- read.csv("~/Documents/PAWS/all_cohorts_info.csv",
stringsAsFactors=FALSE)[,id_vars]
identity$PAWS.ID <- as.numeric(gsub("\\.", "", identity$PAWS.ID))
identity$PAWSID <-  identity$PAWS.ID
identity$PAWS.ID <- NULL
adjust_name <- function(first_last){
first_last <- gsub("\\s*\\([^\\)]+\\)","",as.character(first_last))
name_vec <- strsplit(first_last, " ")[[1]]
if (length(name_vec) > 2){
name_vec <- c(name_vec[1], name_vec[length(name_vec)])
}
last_initial <- paste0(strsplit(name_vec[2], "")[[1]][1], ".")
return(paste(name_vec[1], last_initial))
}
identity$abrev_name <- sapply(identity$Child.s.Name, adjust_name)
identity$School <- sapply(identity$School, function(x) strsplit(x, " ")[[1]][1])
identity$Teacher <- sapply(identity$Teacher, function(x) strsplit(x, " |/|-")[[1]][1])
identity <- subset(identity, select=c(School,Teacher, PAWSID, abrev_name))
identity <- rename(identity, c("abrev_name"="subject"))
# merge PAWSID onto pivoted behavior data
pivot_df<- merge(pivot_df, identity, all.x=TRUE)
pivot_df$paws_student <- !is.na(pivot_df$PAWSID)
head(pivot_df)
head(pivot_df[,c("Subject", "Teacher", "Class")])
head(pivot_df[,c("subject", "Teacher", "Class")])
head(pivot_df[,c("subject", "Teacher", "School")])
head(unique(pivot_df[,c("subject", "Teacher", "School")]))
df_new_id <- unique(pivot_df[,c("subject", "Teacher", "School")])
row.names(df_new_id) <- NULL
df_new_id$PAWSID <- as.numeric(rownames(df_new_id))
head(df_new_id)
library("linHierarchy", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
head(interactions)
subset(interactions, File == "1LAF2-23-04.odf")
source('~/Dropbox/PAWS-Neal/neal_analysis/Paws Analysis.r', echo=TRUE)
subset(interactions, File == "1LAF2-23-04.odf")
library("foreign")
df <- read.dta("~/Dropbox/PAWS-Neal/PNI/PNI_Final_324.dta")
head(df)
source('~/Dropbox/PAWS-Neal/neal_analysis/data_reshape.R', echo=TRUE)
head(intersect())
head(interactions)
source('~/Dropbox/PAWS-Neal/neal_analysis/data_reshape.R', echo=TRUE)
source('~/Dropbox/PAWS-Neal/neal_analysis/Paws Analysis.r', echo=TRUE)
head(X)
sub_x <- subset(X, Teacher.y == "Julie")
sub_x
head(sub_mat)
g2 <- graph.adjacency(sub_mat[sub_x$PAWSID,sub_x$PAWSID])
V(g2)$color <- sub_x[,"DECHIETH"]
plot(g2, layout=layout.fruchterman.reingold, vertex.label=NA,
vertex.size=8, edge.arrow.size=.25)
colours <- unique(as.factor(X[,"DECHIETH"]))
labels <- unique(X[,"DECHIETH"])
colours <- unique(as.factor(sub_x[,"DECHIETH"]))
labels <- unique(sub_x[,"DECHIETH"])
legend("topleft",legend=labels, fill=colours,
title="Ethnicity", seg.len = 1)
sub_x
subset(linked, Teacher == "Julie")
summary(subset(linked, Teacher == "Julie"))
df <- read.csv("~/Dropbox/PAWS-Neal/paws_extracted_data.csv",
na.strings=c("-"," ", ""), stringsAsFactors=FALSE)
head(df)
table(df$Class)
sub_x
sub_x <- subset(X, Teacher.y == "Julie" & PAWSID < 12000)
sub_x <- subset(X, Teacher.y == "Julie" & as.numeric(PAWSID) < 12000)
sub_x
sub_x <- subset(X, Teacher.y == "Julie" & as.numeric(as.character(PAWSID)) < 12000)
sub_x
g2 <- graph.adjacency(sub_mat[sub_x$PAWSID,sub_x$PAWSID])
V(g2)$color <- sub_x[,"DECHIETH"]
plot(g2, layout=layout.fruchterman.reingold, vertex.label=NA,
vertex.size=8, edge.arrow.size=.25)
colours <- unique(as.factor(sub_x[,"DECHIETH"]))
labels <- unique(sub_x[,"DECHIETH"])
legend("topleft",legend=labels, fill=colours,
title="Ethnicity", seg.len = 1)
head(df)
################################################################################
# Data reshape file
#
# Load in the data sets related to peer interactions and change the subjects
# identification to use PAWS ids rather than name. For all those students
# without PAWS ids assign a unique identifie so that they can be tracked.
################################################################################
# Data reshape file
#
# Load in the data sets related to peer interactions and change the subjects
# identification to use PAWS ids rather than name. For all those students
# without PAWS ids assign a unique identifie so that they can be tracked.
################################################################################
rm(list = ls())
library(plyr)
library(foreign)
interactions <- read.csv("~/Dropbox/PAWS-Neal/paws_extracted_data.csv",
na.strings=c("-"," ", ""), stringsAsFactors=FALSE)
# Assign an behavior id to each row
interactions$behavior_id <- as.numeric(rownames(interactions))
# Remove interactions where individual is both sender and reciever
print(nrow(interactions[interactions$Code_R == interactions$Code_S,]))
interactions <- interactions[interactions$Code_R != interactions$Code_S,]
# reshape the data set such that each row is a unique behavior subject
# limit to the columns that we care about
invariant_vars <- c("behavior_id", "Class", "File", "Time", "DE_END", "Type",
"Code_B", "Code_R", "Code_S")
interactions <- interactions[, invariant_vars]
# split up the data by receiver and sender then add them on each other
receiver_df <- interactions[,invariant_vars]
receiver_df$role <- "receiver"
rename_reciever <- c(Code_R="subject", Code_S="partner")
receiver_df <- rename(receiver_df, rename_reciever)
sender_df <- interactions[,invariant_vars]
sender_df$role <- "sender"
rename_sender <- c(Code_S="subject", Code_R="partner")
sender_df <- rename(sender_df, rename_sender)
pivot_df <- rbind(sender_df, receiver_df)
pivot_df$Teacher <- sapply(pivot_df$Class, function(x) strsplit(x, " ")[[1]][2])
pivot_df$School <- sapply(pivot_df$Class, function(x) strsplit(x, " ")[[1]][1])
# Load in the identifier data
id_vars <- c("PAWS.ID", "Cohort", "School", "Teacher", "Child.s.Name")
identity <- read.csv("~/Documents/PAWS/all_cohorts_info.csv",
stringsAsFactors=FALSE)[,id_vars]
identity$PAWS.ID <- as.numeric(gsub("\\.", "", identity$PAWS.ID))
identity$PAWSID <-  identity$PAWS.ID
identity$PAWS.ID <- NULL
adjust_name <- function(first_last){
first_last <- gsub("\\s*\\([^\\)]+\\)","",as.character(first_last))
name_vec <- strsplit(first_last, " ")[[1]]
if (length(name_vec) > 2){
name_vec <- c(name_vec[1], name_vec[length(name_vec)])
}
last_initial <- paste0(strsplit(name_vec[2], "")[[1]][1], ".")
return(paste(name_vec[1], last_initial))
}
identity$abrev_name <- sapply(identity$Child.s.Name, adjust_name)
identity$School <- sapply(identity$School, function(x) strsplit(x, " ")[[1]][1])
identity$Teacher <- sapply(identity$Teacher, function(x) strsplit(x, " |/|-")[[1]][1])
identity <- subset(identity, select=c(School,Teacher, PAWSID, abrev_name))
identity <- rename(identity, c("abrev_name"="subject"))
# merge PAWSID onto pivoted behavior data
pivot_df<- merge(pivot_df, identity, all.x=TRUE)
pivot_df$paws_student <- !is.na(pivot_df$PAWSID)
# look up each unique individual without an ID and assign them one
df_new_id <- unique(pivot_df[,c("subject", "Teacher", "School")])
row.names(df_new_id) <- NULL
df_new_id$PAWSID <- as.numeric(rownames(df_new_id))
df_new_id
pivot_df[is.na(pivot_df$PAWSID),"PAWSID"]
pivot_df[is.na(pivot_df$PAWSID),]
head(pivot_df[is.na(pivot_df$PAWSID),])
df_new_id <- unique(pivot_df[,c("subject", "Teacher", "School", "class")])
df_new_id <- unique(pivot_df[,c("subject", "Teacher", "School", "Class")])
row.names(df_new_id) <- NULL
df_new_id$PAWSID <- as.numeric(rownames(df_new_id))
merge(x = subset(pivot_df[is.na(pivot_df$PAWSID),]), select=-c(PAWSID),
y = df_new_id, by=c("Class", "Teacher", "School"), all.x=TRUE)
nrow(subset(pivot_df[is.na(pivot_df$PAWSID),]), select=-c(PAWSID))
nrow(subset(pivot_df[is.na(pivot_df$PAWSID),], select=-c(PAWSID))
)
merge(x = subset(pivot_df[is.na(pivot_df$PAWSID),], select=-c(PAWSID)),
y = df_new_id, by=c("Class", "Teacher", "School"), all.x=TRUE)
merge(x = subset(pivot_df[is.na(pivot_df$PAWSID),], select=-c(PAWSID)),
y = df_new_id, all.x=TRUE)
nrow(merge(x = subset(pivot_df[is.na(pivot_df$PAWSID),], select=-c(PAWSID)), y = df_new_id, all.x=TRUE)
)
nrow(subset(pivot_df[is.na(pivot_df$PAWSID),], select=-c(PAWSID)))
pivot_df[is.na(pivot_df$PAWSID),"PAWSID"] <-
merge(x = subset(pivot_df[is.na(pivot_df$PAWSID),], select=-c(PAWSID)),
y = df_new_id, all.x=TRUE)$PAWSID
pivot_df <- merge(x = pivot_df,
y = rename(unique(pivot_df[,c("PAWSID", "subject",
"Teacher", "School")]),
c(subject="partner", PAWSID="partnerID")),
by = c("partner", "Teacher", "School", "Class"), all.x = TRUE)
pivot_df <- merge(x = pivot_df,
y = rename(unique(pivot_df[,c("PAWSID", "subject", "Class",
"Teacher", "School")]),
c(subject="partner", PAWSID="partnerID")),
by = c("partner", "Teacher", "School", "Class"), all.x = TRUE)
# go back to the original format now that data ids are merged on
pivot_df_receive <- subset(pivot_df, role == "receiver")
recieve_transform <- c(subject="Code_R", PAWSID="PAWSID_R",
paws_student="paws_student_R")
pivot_df_receive <- rename(pivot_df_receive, recieve_transform)
pivot_df_receive <- subset(pivot_df_receive, select=-c(role, partnerID, partner))
pivot_df_send <- subset(pivot_df, role == "sender")
send_transform <- c(subject="Code_S", PAWSID="PAWSID_S",
paws_student="paws_student_S")
pivot_df_send <- rename(pivot_df_send, send_transform)
pivot_df_send <- subset(pivot_df_send, select=-c(role, partnerID, partner))
merged_interactions <- merge(pivot_df_send, pivot_df_receive)
source('~/Dropbox/PAWS-Neal/neal_analysis/data_reshape.R', echo=TRUE)
source('~/Dropbox/PAWS-Neal/neal_analysis/examine_network.R', echo=TRUE)
schools
source("ohio.dat")
source("~/Documents/Classes/spatial_epi/homework/hw1/ohio.dat")
ohio
summary(ohio)
ncounty <- 1
for (i in 1:ncounty){
indi <- (i-1)*16+seq(1,16)
Y[i] <- sum(ohio$deaths[indi])
}
Y <- NULL
ncounty <- 1
for (i in 1:ncounty){
indi <- (i-1)*16+seq(1,16)
Y[i] <- sum(ohio$deaths[indi])
}
indi
head(ohio)
table(ohio$fips)
length(unique(ohio$fips))
Y <- NULL
ncounty <- length(unique(ohio$fips))
for (i in 1:ncounty){
indi <- (i-1)*16+seq(1,16)
Y[i] <- sum(ohio$deaths[indi])
}
library(maps)
library(sp)
library(RColorBrewer)
plotvar <- Y # variable we want to map
nclr <- 8 # next few lines set up the color scheme for plotting
plotclr <- brewer.pal(nclr,"BuPu")
brks <- round(quantile(plotvar,probs=seq(0,1,1/(nclr))),digits=1)
colornum <- findInterval(plotvar,brks,all.inside=T)
colcode <- plotclr[colornum]
# Note order of data in file is in terms of increasing FIPS codes, which is the same
# as in the map function (see county.fips)
map("county", "ohio",col=colcode,fill=T)
title("Lung cancer deaths in Ohio in 1988")
leg.txt <- paste("[",brks[nclr],",",brks[nclr+1],"]",sep="")
for(i in (nclr-1):1){
leg.txt <- append(leg.txt,paste("[",brks[i],",",brks[i+1],")",sep=""),)
}
leg.txt <- rev(leg.txt)
legend("bottomright",legend=leg.txt,fill=plotclr,bty="n",cex=.8)
legend("topleft",legend=leg.txt,fill=plotclr,bty="n",cex=.8)
source('~/Documents/Classes/spatial_epi/homework/hw1/OhioScript-1.R', echo=TRUE)
source('~/Documents/Classes/spatial_epi/homework/hw1/OhioScript-1.R', echo=TRUE)
head(ohio)
source('~/Documents/Classes/spatial_epi/homework/hw1/OhioScript-1.R', echo=TRUE)
source('~/Documents/Classes/spatial_epi/homework/hw1/OhioScript-1.R', echo=TRUE)
for (s in unique(strata$sex)){
for (r in unique(strata$race)){
with(subset(strata, race == r & sex == s), plot(age, prob))
}
}
library(SpatialEpi)
library(inla)
library(INLABMA)
install.packages("INLA")
install.packages("INLA", repos="http://www.math.ntnu.no/inla/R/stable")
library(INLA)
Scotland
scotland
data("Scotland")
clas(Scotland)
class(Scotland)
data("scotland")
class(scotland)
head(Scotland)
table(Scotland$Region)
scotland.fit1X <- inla(Counts ~ 1 + I(X) + f(Region,
model = "iid", param = c(1, 0.014)), data = Scotland,
family = "poisson", E = E)
summary(scotland.fit1X)
install.packages()
install.packages("maxLik")
rbeta(1,1,1)
rbeta(1000,1,1)
hist(rbeta(1000,1,1))
hist(rbeta(1000,1,.3))
hist(rbeta(1000,3,.3))
hist(rbeta(1000,10,2))
hist(rbeta(1000,10,3))
hist(rbeta(1000,10,10))
plot(density(rbeta(1000,10,10)))
dbeta(.5,10,10)
?dbeta
dbeta(.5,10,10,log=TRUE)
dbeta(.6,10,10,log=TRUE)
dbeta(.4,10,10,log=TRUE)
dbeta(c(.4, .6, .5),10,10,log=TRUE)
rm(list=ls())
source("~/Documents/Classes/spatial_epi/homework/hw1/ohio.dat")
head(ohio)
library(SpatialEpi)
library(maps)
library(sp)
library(RColorBrewer)
?eBayes
library(plyr)
strata <- ddply(ohio, ~age+sex+race, summarise,
deaths=sum(deaths), popn=sum(popn))
source('~/Documents/Classes/spatial_epi/homework/hw2/hw2.R', echo=TRUE)
head(county)
?EBpostdens
?rgamma
is.null(3)
seq(0,1,.25)
library(INLA)
hist(rgamma(1000,5,5))
hist(rlnorm(1000,0,1))
mean(rlnorm(1000,0,1))
library(INLA)
?inla
?f
names(inla.models()$latent)
dgamma(2,10,5)
dgamma(200,10,5)
dgamma(20,10,5)
dgamma(.002,10,5)
dgamma(.2,10,5)
dgamma(.2,10,5,log=True)
dgamma(.2,10,5,log=T)
dgamma(2,10,5,log=T)
source('~/Dropbox/PAWS-Neal/neal_analysis/data_reshape.R', echo=TRUE)
source('~/Dropbox/PAWS-Neal/neal_analysis/examine_network.R', echo=TRUE)
library("foreign")
library("igraph")
library("plyr")
rm(list=ls())
getwd()
source("~/Dropbox/PAWS-Neal/neal_analysis/network_app/utilities.R")
data_sets <- load_data()
df <- data_sets[[1]]
df_status <- data_sets[[2]]
source("~/Dropbox/PAWS-Neal/neal_analysis/network_app/utilities.R")
sub_mat <- create_sub_matrix("prosocial", teacher=NULL, df, df_status)
dim(sub_mat)
sub_mat <- create_sub_matrix("prosocial", teacher=NULL, df, df_status)
g1 <- graph.adjacency(sub_mat)
V(g1)$color <- as.factor(df_status$paws_student)
#V(g1)$color=gsub("FALSE","red",V(g1)$color) #Females will be red
#V(g1)$color=gsub("TRUE","blue",V(g1)$color) #Males will be blue
plot(g1, layout=layout.fruchterman.reingold, vertex.label=NA,
vertex.size=8, edge.arrow.size=.25)
source('~/Dropbox/PAWS-Neal/neal_analysis/examine_network.R', echo=TRUE)
shiny::runApp('Documents/tmp/pac_app')
install.packages("devtools")
library("shinyapps")
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='nmarquez',
token='9110009049F07B35E06BCA3977FCBB29',
secret='btaCQnln6280gV0v+kK9/gYya1u66HNRAG2CaUnz')
library("shinyapps")
deployApp("~/Documents/tmp/pac_app/")
source('~/Dropbox/PAWS-Neal/neal_analysis/data_reshape.R', echo=TRUE)
head(identity)
summary(identity$Teacher)
table(identity$Teacher)
table(interactions$Class)
table(sapply(interactions$Class, function(x) strsplit(x, " ")[[1]][2]))
table(identity$Teacher)
pivot_df$Teacher <- gsub("Pat", "Patricia", pivot_df$Teacher)
table(pivot_df$Teacher)
source('~/Dropbox/PAWS-Neal/neal_analysis/data_reshape.R', echo=TRUE)
shiny::runApp('Dropbox/PAWS-Neal/neal_analysis/network_app')
deployApp("~/Documents/tmp/pac_app/")
names(merged_interactions)
subset(merged_interactions, Teacher == "Carrie")
names(merged_interactions)
subset(merged_interactions, Teacher == "Carrie")[,c("PAWSID_S", "PAWSID_R", "Code_B")]
shiny::runApp('Dropbox/PAWS-Neal/neal_analysis/network_app')
shiny::runApp('Dropbox/PAWS-Neal/neal_analysis/network_app')
shiny::runApp('Dropbox/PAWS-Neal/neal_analysis/network_app')
source('~/Dropbox/PAWS-Neal/neal_analysis/examine_network.R', echo=TRUE)
V(g1)$name
plot(g1, layout=layout.fruchterman.reingold,
)
shiny::runApp('Dropbox/PAWS-Neal/neal_analysis/network_app')
source('~/Dropbox/PAWS-Neal/neal_analysis/data_reshape.R', echo=TRUE)
subset(merged_interactions, Teacher == "Carrie")[,c("PAWSID_S", "PAWSID_R", "Code_B")]
shiny::runApp('Dropbox/PAWS-Neal/neal_analysis/network_app')
subset(subset(merged_interactions, Teacher == "Carrie")[,c("PAWSID_S", "PAWSID_R", "Code_B")], PAWSID_S == 90 | PAWSID_R == 90)
subset(subset(merged_interactions, Teacher == "Carrie")[,c("PAWSID_S", "PAWSID_R", "Code_B")], (PAWSID_S == 90 | PAWSID_R == 90) & (PAWSID_S == 221 | PAWSID_R == 221))
?read.gal
library(spdep)
source('~/Documents/Classes/spatial_epi/homework/hw3/R-starter-code.R', echo=TRUE)
setwd("~/Documents/Classes/spatial_epi/homework/hw3/")
source('~/Documents/Classes/spatial_epi/homework/hw3/R-starter-code.R', echo=TRUE)
rm(list=ls())
source('~/Documents/Classes/spatial_epi/homework/hw3/R-starter-code.R', echo=TRUE)
install.packages(gplots)
install.packages("gplots")
install.packages("gplots")
